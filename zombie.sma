/* Plugin generated by AMXX-Studio */

#include <amxmodx>
#include <amxmisc>
#include <hamsandwich>
#include <cstrike> 
#include <fun>
#include <fakemeta>
#include <engine>

#define PLUGIN "New Plug-In"
#define VERSION "1.0"
#define AUTHOR "author"

#define TASKID_RESPAWNZOMBIES 333
#define TASKID_BALANCE 666


new g_iMaxBots;

new ammobox_shotgun[] = "models/zombie_survival/ammobox_shotgun.mdl"
new ammobox_shotgunT[] = "models/zombie_survival/ammobox_shotgunT.mdl"
new ammobox_shotgun_ent[] = "ammo_shotgun"

new ammobox_shotgun_reward = 10;

new ammobox_heavy[] = "models/zombie_survival/ammobox_heavy.mdl"
new ammobox_heavyT[] = "models/zombie_survival/ammobox_heavyT.mdl"
new ammobox_heavy_ent[] = "ammo_heavy"

new ammobox_heavy_reward = 20;

new ammobox_pistols[] = "models/zombie_survival/ammobox_pistols.mdl"
new ammobox_pistolsT[] = "models/zombie_survival/ammobox_pistolsT.mdl"
new ammobox_pistols_ent[] = "ammo_pistols"

new ammobox_pistols_reward = 30;

new ammobox_rifles[] = "models/zombie_survival/ammobox_rifles.mdl"
new ammobox_riles_ent[] = "ammo_rifles"

new ammobox_rifles_reward = 20;

new reward_health[] = "models/zombie_survival/reward_health.mdl"
new reward_healthT[] = "models/zombie_survival/reward_healthT.mdl"
new reward_health_ent[] = "reward_health"

new zombie_classic[] = "models/player/zombie_classic/zombie_classic.mdl"

new g_iHealthCap[33];

const BITSUM_PISTOLS = ((1<<CSW_USP) | (1<<CSW_GLOCK18) | (1<<CSW_P228) | (1<<CSW_ELITE) | (1<<CSW_FIVESEVEN) | (1<<CSW_DEAGLE))

const BITSUM_SMGS = ((1<<CSW_MAC10) | (1<<CSW_UMP45) | (1<<CSW_MP5NAVY) | (1<<CSW_TMP) | (1<<CSW_P90))

const BITSUM_RIFLES = ((1<<CSW_AUG) | (1<<CSW_GALIL) | (1<<CSW_FAMAS) | (1<<CSW_M4A1) | (1<<CSW_SG552) | (1<<CSW_AK47))

const BITSUM_SHOTGUNS = ((1<<CSW_XM1014) | (1<<CSW_M3)) 

const BITSUM_HEAVY = ((1<<CSW_SCOUT) | (1<<CSW_AWP) | (1<<CSW_M249) | (1<<CSW_DEAGLE) | (1<<CSW_G3SG1) | (1<<CSW_SG550)) 

public plugin_init() {
	register_plugin(PLUGIN, VERSION, AUTHOR)
	
	//register_clcmd("say /test", "testFun");
	register_clcmd("say /noclip", "cmdNoclip");
	// Add your code here...
	set_task(10.0, "BalanceTeams", TASKID_BALANCE, _, _, "b");
	
	RegisterHam(Ham_Killed, "player", "Event_PlayerDeath", 0)
	RegisterHam(Ham_Spawn, "player", "Event_PlayerSpawn", 0)

	register_logevent("Event_RoundEnd", 2, "1=Round_End") 


	register_touch(ammobox_pistols_ent, "player", "FwdTouch");
	register_touch(ammobox_heavy_ent, "player", "FwdTouch");
	register_touch(ammobox_shotgun_ent, "player", "FwdTouch");
	register_touch(ammobox_riles_ent, "player", "FwdTouch");
	register_touch(reward_health_ent, "player", "FwdTouch");


	set_cvar_num("mp_autoteambalance", 0)
	set_cvar_num("mp_limitteams", 0)
	set_cvar_num("mp_freezetime", 0)
	server_cmd("yb_join_team T")
	
}

public Event_RoundEnd(){
	new shouldBreak = false;
	while(!shouldBreak){
		new currEnt;
		currEnt = find_ent_by_class(-1, ammobox_pistols_ent);
		if(currEnt != 0){
			if(is_valid_ent(currEnt))
				remove_entity(currEnt);
			if(task_exists(6565 + currEnt))
				remove_task(6565 + currEnt)
		}else{
			shouldBreak = true;
		}
	}
	shouldBreak = false;
	while(!shouldBreak){
		new currEnt;
		currEnt = find_ent_by_class(-1, ammobox_shotgun_ent);
		if(currEnt != 0){
			if(is_valid_ent(currEnt))
				remove_entity(currEnt);
			if(task_exists(6565 + currEnt))
				remove_task(6565 + currEnt)
		}else{
			shouldBreak = true;
		}
	}
	shouldBreak = false;
	while(!shouldBreak){
		new currEnt;
		currEnt = find_ent_by_class(-1, ammobox_heavy_ent);
		if(currEnt != 0){
			if(is_valid_ent(currEnt))
				remove_entity(currEnt);
			if(task_exists(6565 + currEnt))
				remove_task(6565 + currEnt)
		}else{
			shouldBreak = true;
		}
	}
	shouldBreak = false;
	while(!shouldBreak){
		new currEnt;
		currEnt = find_ent_by_class(-1, ammobox_riles_ent);
		if(currEnt != 0){
			if(is_valid_ent(currEnt))
				remove_entity(currEnt);
			if(task_exists(6565 + currEnt))
				remove_task(6565 + currEnt)
		}else{
			shouldBreak = true;
		}
	}
}

public client_putinserver(id){
	g_iHealthCap[id] = 100;
}

public FwdTouch(pEntity, id){
	if(is_user_bot(id))
		return PLUGIN_CONTINUE;


	new szClassname[64];
	entity_get_string(pEntity, EV_SZ_classname, szClassname, 63)

	new Float:multiplier = random_float(0.8, 1.2);
	new weapons = pev(id, pev_weapons);

	if(equali(szClassname, ammobox_pistols_ent)){
		new reward = floatround(ammobox_pistols_reward * multiplier, floatround_ceil);

		if (weapons & (1<<CSW_USP)) {
			new _ammo = cs_get_user_bpammo(id, CSW_USP);

			if(_ammo >= 100)
				return PLUGIN_CONTINUE;
			else if(_ammo <= 100 - reward)
				cs_set_user_bpammo(id, CSW_USP, _ammo + reward);
		}else if(weapons & (1<<CSW_P228)){
			new _ammo = cs_get_user_bpammo(id, CSW_P228);

			if(_ammo >= 52)
				return PLUGIN_CONTINUE;
			else if(_ammo <= 52 - reward)
				cs_set_user_bpammo(id, CSW_P228, _ammo + reward);
		}else if(weapons & (1<<CSW_FIVESEVEN)){
			new _ammo = cs_get_user_bpammo(id, CSW_FIVESEVEN);

			if(_ammo >= 100)
				return PLUGIN_CONTINUE;
			else if(_ammo <= 100 - reward)
				cs_set_user_bpammo(id, CSW_FIVESEVEN, _ammo + reward);
		}else if(weapons & (1<<CSW_GLOCK18)){
			new _ammo = cs_get_user_bpammo(id, CSW_GLOCK18);

			if(_ammo >= 120)
				return PLUGIN_CONTINUE;
			else if(_ammo <= 120 - reward)
				cs_set_user_bpammo(id, CSW_GLOCK18, _ammo + reward);
		}else if(weapons & (1<<CSW_ELITE)){
			new _ammo = cs_get_user_bpammo(id, CSW_ELITE);

			if(_ammo >= 120)
				return PLUGIN_CONTINUE;
			else if(_ammo <= 120 - reward)
				cs_set_user_bpammo(id, CSW_ELITE, _ammo + reward);
		}else if(weapons & (1<<CSW_MAC10)){
			new _ammo = cs_get_user_bpammo(id, CSW_MAC10);

			if(_ammo >= 100)
				return PLUGIN_CONTINUE;
			else if(_ammo <= 100 - reward)
				cs_set_user_bpammo(id, CSW_MAC10, _ammo + reward);
		}else if(weapons & (1<<CSW_UMP45)){
			new _ammo = cs_get_user_bpammo(id, CSW_UMP45);

			if(_ammo >= 100)
				return PLUGIN_CONTINUE;
			else if(_ammo <= 100 - reward)
				cs_set_user_bpammo(id, CSW_UMP45, _ammo + reward);
		}else if(weapons & (1<<CSW_P90)){
			new _ammo = cs_get_user_bpammo(id, CSW_P90);

			if(_ammo >= 100)
				return PLUGIN_CONTINUE;
			else if(_ammo <= 100 - reward)
				cs_set_user_bpammo(id, CSW_P90, _ammo + reward);
		}else if(weapons & (1<<CSW_TMP)){
			new _ammo = cs_get_user_bpammo(id, CSW_TMP);

			if(_ammo >= 120)
				return PLUGIN_CONTINUE;
			else if(_ammo <= 120 - reward)
				cs_set_user_bpammo(id, CSW_TMP, _ammo + reward);
		}else if(weapons & (1<<CSW_MP5NAVY)){
			new _ammo = cs_get_user_bpammo(id, CSW_MP5NAVY);

			if(_ammo >= 120)
				return PLUGIN_CONTINUE;
			else if(_ammo <= 120 - reward)
				cs_set_user_bpammo(id, CSW_MP5NAVY, _ammo + reward);
		}
		
		
	}else if(equali(szClassname, ammobox_heavy_ent)){
		new reward = floatround(ammobox_heavy_reward * multiplier, floatround_ceil);

		if(weapons & (1<<CSW_SCOUT)){
			new _ammo = cs_get_user_bpammo(id, CSW_SCOUT);

			if(_ammo >= 90)
				return PLUGIN_CONTINUE;
			else if(_ammo <= 90 - reward)
				cs_set_user_bpammo(id, CSW_SCOUT, _ammo + reward);
		} else if(weapons & (1<<CSW_SG550)){
			new _ammo = cs_get_user_bpammo(id, CSW_SG550);

			if(_ammo >= 90)
				return PLUGIN_CONTINUE;
			else if(_ammo <= 90 - reward)
				cs_set_user_bpammo(id, CSW_SG550, _ammo + reward);
		} else if(weapons & (1<<CSW_AWP)){
			new _ammo = cs_get_user_bpammo(id, CSW_AWP);

			if(_ammo >= 30)
				return PLUGIN_CONTINUE;
			else if(_ammo <= 30 - reward)
				cs_set_user_bpammo(id, CSW_AWP, _ammo + reward);
		} else if(weapons & (1<<CSW_M249)){
			new _ammo = cs_get_user_bpammo(id, CSW_M249);

			if(_ammo >= 200)
				return PLUGIN_CONTINUE;
			else if(_ammo <= 200 - reward)
				cs_set_user_bpammo(id, CSW_M249, _ammo + reward);
		} else if(weapons & (1<<CSW_G3SG1)){
			new _ammo = cs_get_user_bpammo(id, CSW_G3SG1);

			if(_ammo >= 90)
				return PLUGIN_CONTINUE;
			else if(_ammo <= 90 - reward)
				cs_set_user_bpammo(id, CSW_G3SG1, _ammo + reward);
		} else if(weapons & (1<<CSW_DEAGLE)){
			new _ammo = cs_get_user_bpammo(id, CSW_DEAGLE);

			if(_ammo >= 35)
				return PLUGIN_CONTINUE;
			else if(_ammo <= 35 - reward)
				cs_set_user_bpammo(id, CSW_DEAGLE, _ammo + reward);
		} 

	}else if(equali(szClassname, ammobox_riles_ent)){
		new reward = floatround(ammobox_rifles_reward * multiplier, floatround_ceil);

		if(weapons & (1<<CSW_AUG)){
			new _ammo = cs_get_user_bpammo(id, CSW_AUG);

			if(_ammo >= 90)
				return PLUGIN_CONTINUE;
			else if(_ammo <= 90 - reward)
				cs_set_user_bpammo(id, CSW_AUG, _ammo + reward);
		} else if(weapons & (1<<CSW_GALIL)){
			new _ammo = cs_get_user_bpammo(id, CSW_GALIL);

			if(_ammo >= 90)
				return PLUGIN_CONTINUE;
			else if(_ammo <= 90 - reward)
				cs_set_user_bpammo(id, CSW_GALIL, _ammo + reward);
		} else if(weapons & (1<<CSW_FAMAS)){
			new _ammo = cs_get_user_bpammo(id, CSW_FAMAS);

			if(_ammo >= 90)
				return PLUGIN_CONTINUE;
			else if(_ammo <= 90 - reward)
				cs_set_user_bpammo(id, CSW_FAMAS, _ammo + reward);
		} else if(weapons & (1<<CSW_M4A1)){
			new _ammo = cs_get_user_bpammo(id, CSW_M4A1);

			if(_ammo >= 90)
				return PLUGIN_CONTINUE;
			else if(_ammo <= 90 - reward)
				cs_set_user_bpammo(id, CSW_M4A1, _ammo + reward);
		} else if(weapons & (1<<CSW_SG552)){
			new _ammo = cs_get_user_bpammo(id, CSW_SG552);

			if(_ammo >= 90)
				return PLUGIN_CONTINUE;
			else if(_ammo <= 90 - reward)
				cs_set_user_bpammo(id, CSW_SG552, _ammo + reward);
		} else if(weapons & (1<<CSW_AK47)){
			new _ammo = cs_get_user_bpammo(id, CSW_AK47);

			if(_ammo >= 90)
				return PLUGIN_CONTINUE;
			else if(_ammo <= 90 - reward)
				cs_set_user_bpammo(id, CSW_AK47, _ammo + reward);
		} 

	}else if(equali(szClassname, ammobox_shotgun_ent)){
		new reward = floatround(ammobox_shotgun_reward * multiplier, floatround_ceil);

		if(weapons & (1<<CSW_XM1014)){
			new _ammo = cs_get_user_bpammo(id, CSW_XM1014);

			if(_ammo >= 32)
				return PLUGIN_CONTINUE;
			else if(_ammo <= 32 - reward)
				cs_set_user_bpammo(id, CSW_XM1014, _ammo + reward);
		} else if(weapons & (1<<CSW_M3)){
			new _ammo = cs_get_user_bpammo(id, CSW_M3);

			if(_ammo >= 32)
				return PLUGIN_CONTINUE;
			else if(_ammo <= 32 - reward)
				cs_set_user_bpammo(id, CSW_M3, _ammo + reward);
		}
	}else if(equali(szClassname, reward_health_ent)){
		new _iHealth = get_user_health(id);
		
		if(_iHealth <= g_iHealthCap[id] - 25)
			set_user_health(id, _iHealth + 25)
		else if(_iHealth > 75)
			set_user_health(id, g_iHealthCap[id]);
		else if(_iHealth == g_iHealthCap[id])
			return PLUGIN_CONTINUE; //dont steal item 4 no reason
	}

	new szBuffer[64];
	if(random_num(0,1) == 0){
		format(szBuffer, 63, "items/ammopickup1.wav");
	}else{
		format(szBuffer, 63, "items/ammopickup2.wav");	
	}
	client_cmd(id, "spk %s", szBuffer)
	if(is_valid_ent(pEntity))
		remove_entity(pEntity);

	return PLUGIN_CONTINUE;	
}


public cmdNoclip(id){
	
	set_user_noclip(id, get_user_noclip(id) ? 0 : 1);
	
	//new szUserWeapon = pev(id,pev_weapons);

}

public plugin_precache(){
	precache_model(ammobox_heavy)
	precache_model(ammobox_heavyT)

	precache_model(ammobox_pistols)
	precache_model(ammobox_pistolsT)

	precache_model(ammobox_rifles)
	
	precache_model(ammobox_shotgun)
	precache_model(ammobox_shotgunT)

	precache_model(reward_health)
	precache_model(reward_healthT)


	precache_model(zombie_classic)

	precache_sound("items/ammopickup1.wav")

	precache_sound("items/ammopickup2.wav")
	
	new ent = create_entity("info_map_parameters")
	DispatchKeyValue(ent,"buying","3") // 3 = nobody can buy, 1 = Ts CAN'T buy, 2 = CTs CAN'T buy, 0 = everybody can buy
	DispatchSpawn(ent)
}

public Event_PlayerDeath(victim, killer){

	if(cs_get_user_team(victim) & CS_TEAM_T){
		new iArg[2]
		iArg[1] = victim;
		set_task(2.5, "RespawnZombies", 1337 + victim, iArg, sizeof(iArg), "a", 1)

		new items = 0;
		new shouldBreak = false;

		new bSpawnHealth = false;

		while(!shouldBreak){
			new g_random = random_num(0,100);
			if(g_random <= 80 / (items + 1)){
				items++;
				new r_random = random_num(0,4);
				if(r_random <= 2){
					bSpawnHealth = true;
					items++;
				}
			}else{
				shouldBreak = true;
			}
		}

		for(new i = 1; i <= items; i++){

			new randItem = random_num(0, 100);

			new Float:randAngle = random_float(-180.0, 180.0)

			new Float:origin [3];
			entity_get_vector(victim, EV_VEC_origin, origin);
			new Ent = create_entity ( "info_target" );

		
	

			set_pev( Ent ,pev_scale,0.5)
			if ( !Ent )
				return 0;
			
			if(bSpawnHealth){
				bSpawnHealth = false;
				entity_set_string ( Ent, EV_SZ_classname, reward_health_ent );
				entity_set_model ( Ent, reward_health );
			}

			if(randItem <= 10){
				entity_set_string ( Ent, EV_SZ_classname, ammobox_heavy_ent );
				entity_set_model ( Ent, ammobox_heavy );
				set_pev( Ent ,pev_scale,0.1)
			}else if(randItem > 10 && randItem <= 50){
				entity_set_string ( Ent, EV_SZ_classname, ammobox_pistols_ent );
				entity_set_model ( Ent, ammobox_pistols );
			}else if(randItem > 50 && randItem <= 85){
				entity_set_string ( Ent, EV_SZ_classname, ammobox_riles_ent );
				entity_set_model ( Ent, ammobox_rifles );	
			}else if(randItem > 85){
				entity_set_string ( Ent, EV_SZ_classname, ammobox_shotgun_ent );
				entity_set_model ( Ent, ammobox_shotgun );
			}
		
			new Float:angles[3]
			angles[0] = randAngle;
			angles[1] = 0.0;
			angles[2] = 0.0;

			entity_set_vector( Ent, EV_VEC_v_angle, angles)

			entity_set_origin ( Ent, origin );
			entity_set_size ( Ent, Float: { -10.0, -10.0, -10.0 }, Float: { 10.0, 10.0, 10.0 } );
			entity_set_int ( Ent, EV_INT_solid, SOLID_TRIGGER );
			entity_set_int ( Ent, EV_INT_movetype, MOVETYPE_TOSS );
			entity_set_int ( Ent, EV_INT_rendermode, kRenderNormal );
			entity_set_float ( Ent, EV_FL_renderamt, 40.0 );
			entity_set_float ( Ent, EV_FL_gravity, 0.7 );
			entity_set_edict( Ent, EV_ENT_owner, victim);
			entity_set_int( Ent, EV_INT_renderfx, kRenderFxGlowShell );
			entity_set_vector( Ent, EV_VEC_rendercolor, Float:{200.0 , 200.0, 30.0} );

			
			new Float:flGameTime = get_gametime( );
	
			entity_set_float( Ent, EV_FL_fuser1, flGameTime + 0.2 );
			entity_set_float( Ent, EV_FL_nextthink, flGameTime + 1.0 );

			new EntHandl[2]
			EntHandl[1] = Ent;
			//set_task(15.0, "DestroyItem", 6565 + Ent, EntHandl, sizeof(EntHandl), "a", 1)

			//DispatchSpawn ( Ent );
		}
				
	}

	return PLUGIN_CONTINUE;
}

public DestroyItem(args[]){
	new entId = args[1];

	if(is_valid_ent(entId)){
		remove_entity(entId);
	}
}


public Event_PlayerSpawn(id){
	new szUsername[64];
	get_user_name(id, szUsername, 63);

	if(is_user_alive(id) && cs_get_user_team(id) & CS_TEAM_T){

		new iArg[2]
		iArg[1] = id;
		set_task(0.1, "ZombieClass", 1337 + id, iArg, sizeof(iArg), "a", 1)
	}

}

public ZombieClass(args[]){
	new id = args[1]

	strip_user_weapons(id);
	give_item(id, "weapon_knife");

	new rand = random_num(0,3);
	cs_set_user_model(id, "zombie_classic");

	switch (rand){
		case 0:
		{

			set_user_health(id, 300);
			set_user_maxspeed(id, 250.0);
		}
		case 1:
		{
			set_user_health(id, 400);
			set_user_maxspeed(id, 235.0);
		}
		case 2:
		{
			set_user_health(id, 300);
			set_user_maxspeed(id, 250.0);
		}
		case 3:
		{
			set_user_health(id, 250)
			set_user_maxspeed(id, 265.0)
		}
	}
	entity_set_string(id, EV_SZ_viewmodel, "")
	entity_set_string(id, EV_SZ_weaponmodel, "")

}


public BalanceTeams(id){
	new _PlayerCount = 0;

	for(new i = 0; i <= get_maxplayers(); i++)
	{
		if(is_user_connected(i)){
			if(cs_get_user_team(i) & CS_TEAM_CT){
				_PlayerCount++;
			}
		}
	}
	
	g_iMaxBots = _PlayerCount * 3;
	
	server_cmd("yb_quota %i", g_iMaxBots);
	
}

public RespawnZombies(args[]){
	new i = args[1];
	if(is_user_connected(i) && is_user_bot(i))
		if(cs_get_user_team(i) & CS_TEAM_T){
			if(!is_user_alive(i)){
				ExecuteHamB(Ham_CS_RoundRespawn, i);
				new iArg[2]
				iArg[1] = i;
				remove_task(1337 + i);
				set_task(1.0, "ZombieClass", 137 + i, iArg, sizeof(iArg), "a", 1)

			}
		}
	
}



/* AMXX-Studio Notes - DO NOT MODIFY BELOW HERE
*{\\ rtf1\\ ansi\\ deff0{\\ fonttbl{\\ f0\\ fnil Tahoma;}}\n\\ viewkind4\\ uc1\\ pard\\ lang1029\\ f0\\ fs16 \n\\ par }
*/
